.. Copyright 2017-2019 Lawrence Livermore National Security, LLC and other
   Hatchet Project Developers. See the top-level LICENSE file for details.

   SPDX-License-Identifier: MIT

User Guide
==========

Hatchet is a Python tool that simplifies the process of analyzing hierarchical
performance data such as calling context trees. Hatchet uses pandas dataframes
to store the data on each node of the hierarchy and keeps the graph
relationships between the nodes in a different data structure that is kept
consistent with the dataframe.

Supported Input File Formats
----------------------------

Currently, Hatchet supports the following file formats as input:

* `HPCToolkit <http://hpctoolkit.org/index.html>`_ database: This is generated
  by using ``hpcprof-mpi`` to post-process the raw measurements directory
  output by HPCToolkit.
* Caliper `Json-split
  <http://llnl.github.io/Caliper/OutputFormats.html#json-split>`_ file: This is
  generated by either running cali-query on the raw Caliper data or by enabling
  the mpireport service when using caliper.
* Caliper `Cali <http://llnl.github.io/Caliper/OutputFormats.html#cali>`_ file:
  This is the raw Caliper data that can be read by cali-query.
* `DOT <https://www.graphviz.org/doc/info/lang.html>`_ format: This is
  generated by using ``gprof2dot`` on ``gprof`` or ``callgrind`` output.

Graphframe
-----------

``Graphframe`` is the main data structure in Hatchet that stores the
performance data that is read in from an HPCToolkit database, Caliper Json or
Cali file, or gprof/callgrind DOT file. Typically, the raw input data is in the
form of a tree. However, since subsequent operations on the tree can lead to
new edges being created which can turn the tree into a graph, we store the
input data as a directed graph. The graphframe consists of a graph object that
stores the edge relationships between nodes and a dataframe that stores
different metrics (numerical data) and categorical data associated with each
node.

Graph
^^^^^

The graph can be connected or disconnected (multiple roots) and each node in
the graph can have one or more parents and children. The node stores its
frame, which can be defined by the reader. The callpath is derived by
appending the frames from the root to a given node.

Dataframe
^^^^^^^^^

The dataframe holds all the numerical and categorical data associated with each
node. Since typically the call tree data is per process, a multiindex composed
of the node and MPI rank is used to index into the dataframe.

Graph-centric Operations
------------------------
**Squash**: The ``squash`` operation is always performed after a ``filter`` is
done on the dataframe. ``Squash`` removes nodes from the graph that were
filtered out due to a previous ``filter`` operation. When one or more nodes on
a path are removed from the graph, the nearest alive ancestor is connected by
an edge to the nearest alive child on the path.

**Unify**: The ``unify`` operation takes two graphframes and updates their
graphframes in place so they are unified. Once the graphframes are unified,
their graphs will point to the same unified graph object. The dataframes in
each of the graphframes will be updated to point to the same nodes.

**Equal**: The ``==`` operation checks if two graphs have the same structure by
traversing the tree and comparing the frame at each node.

**Diff**: The ``-`` and ``-=`` operations computes the difference between two
graphframes and stores the result in a new graphframe or in self (in place).
The two graphframes are unified before performing this operation.

**Add**: The ``+`` and ``+=`` operations computes the sum of two graphframes
and stores the result in a new graphframe or in self (in place).  The two
graphframes are unified before performing this operation.

**Groupby and Aggregate**:


Dataframe-centric Operations
----------------------------
**Filter**: ``filter`` takes a user supplied function and applies that to all
rows in the dataframe. The resulting Series or dataframe is used to filter the
dataframe to only return rows that are True. The returned graphframe preserves
the graph provided as input.

**Fill**:
