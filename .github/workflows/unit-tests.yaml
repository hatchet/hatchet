name: Hatchet Unit Test CI

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop, releases/** ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [2.7, 3.5, 3.6, 3.7, 3.8]

    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade flake8 pytest
        pip install -r requirements.txt
        python setup.py install
        python setup.py build_ext --inplace
        python -m pip list
    - name: Update Black
      if: ${{ matrix.python-version == 3.7 }}
      run: |
        pip install --upgrade black
    - name: Lint and Format Check with Flake8 and Black
      if: ${{ matrix.python-version == 3.7 }}
      run: |
        black --diff --check .
        flake8
    - name: Basic Test with pytest
      run: |
        PYTHONPATH=. coverage run $(which pytest)
    - name: "Clone Caliper"
      uses: actions/checkout@v2
      with:
        repository: LLNL/Caliper
        path: Caliper
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Build Caliper
      working-directory: Caliper
      run: |
        echo -e "PWD: $(pwd)"
        mkdir build && mkdir install
        cd build
        cmake -DCMAKE_INSTALL_PREFIX=../install ../
        make VERBOSE=1
        make install
        export PATH=$(pwd)/../install/bin:${PATH}
        echo -e "PATH=${PATH}"
        cd $GITHUB_WORKSPACE
        echo -e "PWD:${PWD}"
        which cali-query
    - name: Build Timemory
      if: ${{ matrix.python-version >= 3.6 }}
      run: |
        python -m pip install --upgrade scikit-build
        # python -m pip install --upgrade --no-cache-dir --no-deps -v --pre timemory --install-option=--disable-{c,gotcha,tools}
        python -m pip install --upgrade --no-cache-dir --no-deps -v timemory==3.2.0.dev4 --install-option=--disable-{c,gotcha,tools}
    - name: Test Caliper and Timemory Support with pytest
      run: |
        PYTHONPATH=. coverage run $(which pytest)
        # - name: "Convert coverage"
        #   run: "python -m coverage xml"
    - name: "Upload coverage to Codecov"
      uses: "codecov/codecov-action@v1"
      with:
        fail_ci_if_error: true
